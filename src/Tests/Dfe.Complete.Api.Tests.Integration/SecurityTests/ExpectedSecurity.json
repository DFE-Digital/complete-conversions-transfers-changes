{
  "Endpoints": [
    {
      "Controller": "ProjectsController",
      "Action": "CreateConversionProjectAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWrite"
    },
    {
      "Controller": "ProjectsController",
      "Action": "CreateTransferProjectAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWrite"
    },
    {
      "Controller": "ProjectsController",
      "Action": "CreateMatConversionProjectAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWrite"
    },
    {
      "Controller": "ProjectsController",
      "Action": "CreateMatTransferProjectAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWrite"
    },
    {
      "Controller": "ProjectsController",
      "Action": "GetProjectAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsInTrustAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllMaTsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "CountAllProjectsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsForLocalAuthorityAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsByRegionAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsForRegionAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsForTeamAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsForUserAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "GetProjectGroupByGroupReferenceNumber_Async",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "RemoveProject",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdateDelete"
    },
    {
      "Controller": "ProjectsController",
      "Action": "SearchProjectsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsByTrustRefAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsConvertingAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "UpdateAcademyUrnAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWrite"
    },
    {
      "Controller": "ProjectsController",
      "Action": "GetNotesByProjectIdAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "GetTaskNotesByProjectIdQueryAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "CreateProjectNoteAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWrite"
    },
    {
      "Controller": "ProjectsController",
      "Action": "UpdateProjectNoteAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "ProjectsController",
      "Action": "DeleteProjectNoteAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdateDelete"
    },
    {
      "Controller": "CsvExportController",
      "Action": "GetConversionCsvByMonthAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "CsvExportController",
      "Action": "GetConversionCsvByMonthContentsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "UsersController",
      "Action": "GetUserWithProjectsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "UsersController",
      "Action": "ListAllUsersWithProjectsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "TrustController",
      "Action": "ListAllTrustsWithProjectsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ServiceSupportController",
      "Action": "CreateLocalAuthorityAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWrite"
    },
    {
      "Controller": "ServiceSupportController",
      "Action": "ListAllLocalAuthoritiesAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ServiceSupportController",
      "Action": "GetLocalAuthorityDetailsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ServiceSupportController",
      "Action": "UpdateLocalAuthorityDetailsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "ServiceSupportController",
      "Action": "RemoveLocalAuthorityAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdateDelete"
    },
    {
      "Controller": "ProjectGroupController",
      "Action": "GetProjectGroupByIdAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectGroupController",
      "Action": "GetProjectGroupsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectGroupController",
      "Action": "GetProjectGroupDetailsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "TasksDataController",
      "Action": "GetTransferTasksDataByIdAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsStatisticsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ContactsController",
      "Action": "ListAllContactsForProjectAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ContactsController",
      "Action": "ListAllContactsForLocalAuthorityAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "GetProjectByIdAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "ListAllProjectsHandoverAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "GetHandoverProjectDetailsAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "AssignHandoverProjectAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "ProjectsController",
      "Action": "GetProjectSignificantDateAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "UpdateSignificantDateAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWrite"
    },
    {
      "Controller": "TasksDataController",
      "Action": "GetConversionTasksDataByIdAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "ProjectsController",
      "Action": "GetKeyContactByProjectIdAsync",
      "ExpectedSecurity": "Authorize: Policy=CanRead"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateHandoverWithDeliveryOfficerTaskDataByTaskDataIdAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateDeedOfNovationAndVariationTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateExternalStakeholderKickOffTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWrite"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateArticleOfAssociationTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWrite"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateDeedOfVariationTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateSupplementalFundingAgreementTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateRedactAndSendDocumentsTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateConfirmProposedCapacityOfTheAcademyTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateConfirmDateAcademyTransferredTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateDeclarationOfExpenditureCertificateTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateConfirmTransferHasAuthorityToProceedTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateConfirmAllConditionsMetTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "ProjectsController",
      "Action": "RecordDaoRevocationDecisionAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateConfirmAcademyOpenedDateTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    },
    {
      "Controller": "TasksDataController",
      "Action": "UpdateChurchSupplementalAgreementTaskAsync",
      "ExpectedSecurity": "Authorize: Policy=CanReadWriteUpdate"
    }
  ]
}
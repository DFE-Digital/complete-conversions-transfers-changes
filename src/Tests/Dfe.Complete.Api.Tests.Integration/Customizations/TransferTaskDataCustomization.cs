using AutoFixture;
using Dfe.Complete.Domain.Entities;
using Dfe.Complete.Domain.ValueObjects;
using GovUK.Dfe.CoreLibs.Testing.AutoFixture.Customizations;

namespace Dfe.Complete.Api.Tests.Integration.Customizations;

public class TransferTaskDataCustomization : ICustomization
{
    public void Customize(IFixture fixture)
    {
        fixture.Customize(new DateOnlyCustomization());

        fixture.Customize<TransferTasksData>(composer => composer
            .With(x => x.Id, fixture.Create<TaskDataId>())
            .With(x => x.CreatedAt, fixture.Create<DateTime>())
            .With(x => x.UpdatedAt, fixture.Create<DateTime>())
            .With(x => x.ArticlesOfAssociationCleared, false)
            .With(x => x.ArticlesOfAssociationNotApplicable, false)
            .With(x => x.ArticlesOfAssociationReceived, false)
            .With(x => x.ArticlesOfAssociationSaved, false)
            .With(x => x.ArticlesOfAssociationSent, false)
            .With(x => x.ArticlesOfAssociationSigned, false)
            .With(x => x.BankDetailsChangingYesNo, false)
            .With(x => x.CheckAndConfirmFinancialInformationAcademySurplusDeficit, fixture.Create<string>())
            .With(x => x.CheckAndConfirmFinancialInformationNotApplicable, false)
            .With(x => x.CheckAndConfirmFinancialInformationTrustSurplusDeficit, fixture.Create<string>())
            .With(x => x.ChurchSupplementalAgreementCleared, false)
            .With(x => x.ChurchSupplementalAgreementNotApplicable, false)
            .With(x => x.ChurchSupplementalAgreementReceived, false)
            .With(x => x.ChurchSupplementalAgreementSavedAfterSigningBySecretaryState, false)
            .With(x => x.ChurchSupplementalAgreementSavedAfterSigningByTrustDiocese, false)
            .With(x => x.ChurchSupplementalAgreementSignedDiocese, false)
            .With(x => x.ChurchSupplementalAgreementSignedIncomingTrust, false)
            .With(x => x.ChurchSupplementalAgreementSignedSecretaryState, false)
            .With(x => x.ClosureOrTransferDeclarationCleared, false)
            .With(x => x.ClosureOrTransferDeclarationNotApplicable, false)
            .With(x => x.ClosureOrTransferDeclarationReceived, false)
            .With(x => x.ClosureOrTransferDeclarationSaved, false)
            .With(x => x.ClosureOrTransferDeclarationSent, false)
            .With(x => x.CommercialTransferAgreementConfirmAgreed, false)
            .With(x => x.CommercialTransferAgreementConfirmSigned, false)
            .With(x => x.CommercialTransferAgreementQuestionsChecked, false)
            .With(x => x.CommercialTransferAgreementQuestionsReceived, false)
            .With(x => x.CommercialTransferAgreementSaveConfirmationEmails, false)
            .With(x => x.ConditionsMetBaselineSheetApproved, false)
            .With(x => x.ConditionsMetCheckAnyInformationChanged, false)
            .With(x => x.ConfirmDateAcademyTransferredDateTransferred, fixture.Create<DateOnly?>())
            .With(x => x.ConfirmIncomingTrustHasCompletedAllActionsEmailed, false)
            .With(x => x.ConfirmIncomingTrustHasCompletedAllActionsSaved, false)
            .With(x => x.DeclarationOfExpenditureCertificateCorrect, false)
            .With(x => x.DeclarationOfExpenditureCertificateDateReceived, fixture.Create<DateOnly?>())
            .With(x => x.DeclarationOfExpenditureCertificateNotApplicable, false)
            .With(x => x.DeclarationOfExpenditureCertificateSaved, false)
            .With(x => x.DeedOfNovationAndVariationCleared, false)
            .With(x => x.DeedOfNovationAndVariationSaveAfterSign, false)
            .With(x => x.DeedOfNovationAndVariationSaved, false)
            .With(x => x.DeedOfNovationAndVariationSignedIncomingTrust, false)
            .With(x => x.DeedOfNovationAndVariationSignedOutgoingTrust, false)
            .With(x => x.DeedOfNovationAndVariationSignedSecretaryState, false)
            .With(x => x.DeedOfNovationAndVariationReceived, false)
            .With(x => x.DeedOfTerminationForTheMasterFundingAgreementCleared, false)
            .With(x => x.DeedOfTerminationForTheMasterFundingAgreementContactFinancialReportingTeam, false)
            .With(x => x.DeedOfTerminationForTheMasterFundingAgreementNotApplicable, false)
            .With(x => x.DeedOfTerminationForTheMasterFundingAgreementReceived, false)
            .With(x => x.DeedOfTerminationForTheMasterFundingAgreementSavedAcademyAndOutgoingTrustSharepoint, false)
            .With(x => x.DeedOfTerminationForTheMasterFundingAgreementSavedInAcademySharepointFolder, false)
            .With(x => x.DeedOfTerminationForTheMasterFundingAgreementSigned, false)
            .With(x => x.DeedOfTerminationForTheMasterFundingAgreementSignedSecretaryState, false)
            .With(x => x.DeedOfVariationCleared, false)
            .With(x => x.DeedOfVariationNotApplicable, false)
            .With(x => x.DeedOfVariationReceived, false)
            .With(x => x.DeedOfVariationSaved, false)
            .With(x => x.DeedOfVariationSent, false)
            .With(x => x.DeedOfVariationSigned, false)
            .With(x => x.DeedOfVariationSignedSecretaryState, false)
            .With(x => x.DeedTerminationChurchAgreementCleared, false)
            .With(x => x.DeedTerminationChurchAgreementNotApplicable, false)
            .With(x => x.DeedTerminationChurchAgreementReceived, false)
            .With(x => x.DeedTerminationChurchAgreementSaved, false)
            .With(x => x.DeedTerminationChurchAgreementSavedAfterSigningBySecretaryState, false)
            .With(x => x.DeedTerminationChurchAgreementSignedDiocese, false)
            .With(x => x.DeedTerminationChurchAgreementSignedOutgoingTrust, false)
            .With(x => x.DeedTerminationChurchAgreementSignedSecretaryState, false)
            .With(x => x.FinancialSafeguardingGovernanceIssues, false)
            .With(x => x.FormMCleared, false)
            .With(x => x.FormMNotApplicable, false)
            .With(x => x.FormMReceivedFormM, false)
            .With(x => x.FormMReceivedTitlePlans, false)
            .With(x => x.FormMSaved, false)
            .With(x => x.FormMSigned, false)
            .With(x => x.HandoverMeeting, false)
            .With(x => x.HandoverNotApplicable, false)
            .With(x => x.HandoverNotes, false)
            .With(x => x.HandoverReview, false)
            .With(x => x.InadequateOfsted, false)
            .With(x => x.LandConsentLetterDrafted, false)
            .With(x => x.LandConsentLetterNotApplicable, false)
            .With(x => x.LandConsentLetterSaved, false)
            .With(x => x.LandConsentLetterSent, false)
            .With(x => x.LandConsentLetterSigned, false)
            .With(x => x.MasterFundingAgreementCleared, false)
            .With(x => x.MasterFundingAgreementNotApplicable, false)
            .With(x => x.MasterFundingAgreementReceived, false)
            .With(x => x.MasterFundingAgreementSaved, false)
            .With(x => x.MasterFundingAgreementSigned, false)
            .With(x => x.MasterFundingAgreementSignedSecretaryState, false)
            .With(x => x.OutgoingTrustToClose, false)
            .With(x => x.RedactAndSendDocumentsRedact, false)
            .With(x => x.RedactAndSendDocumentsSaved, false)
            .With(x => x.RedactAndSendDocumentsSendToEsfa, false)
            .With(x => x.RedactAndSendDocumentsSendToFundingTeam, false)
            .With(x => x.RedactAndSendDocumentsSendToSolicitors, false)
            .With(x => x.RequestNewUrnAndRecordComplete, false)
            .With(x => x.RequestNewUrnAndRecordGive, false)
            .With(x => x.RequestNewUrnAndRecordNotApplicable, false)
            .With(x => x.RequestNewUrnAndRecordReceive, false)
            .With(x => x.RpaPolicyConfirm, false)
            .With(x => x.SponsoredSupportGrantNotApplicable, false)
            .With(x => x.SponsoredSupportGrantType, fixture.Create<string>())
            .With(x => x.StakeholderKickOffIntroductoryEmails, false)
            .With(x => x.StakeholderKickOffMeeting, false)
            .With(x => x.StakeholderKickOffSetupMeeting, false)
        );
    }
}


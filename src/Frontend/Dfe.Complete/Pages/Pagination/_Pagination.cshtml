@model Dfe.Complete.Pages.Pagination.PaginationModel
@* @{ *@
   @* var nonce = Context.GetNonce(); *@
@* } *@

@if (Model.TotalPages > 1)
{
  <govuk-pagination id="@Model.PaginationContainerId">
    @if (Model.HasPrevious)
    {
      <govuk-pagination-previous href="@Html.Raw(Model.PreviousPageLink)" id="@Model.PreviousButtonId" data-testid="@Model.PreviousButtonId"/>
    }
    @for (var pageIdx = 0; pageIdx < Model.TotalPages; pageIdx++)
    {
      var pageNumber = pageIdx + 1;
      var isCurrentPage = Model.CurrentPageNumber == pageNumber;
      var pageNumberLinkId = $"{Model.Prefix}page-{pageNumber}";
      var ariaCurrentPage = isCurrentPage ? "true" : "false";
      var ariaLabel = isCurrentPage ? $"Current page, page {pageNumber}" : $"Go to page {pageNumber}";

      if (!Model.PagesToDisplay.Contains(pageNumber))
      {
        continue;
      }

      if (Model.Previous.HasValue && Model.Previous == pageNumber && Model.Previous - 1 > 1)
      {
        <govuk-pagination-ellipsis/>
      }
      <govuk-pagination-item id="@pageNumberLinkId" href="@Html.Raw(Model.SetUrl(Model.Url,pageNumber))" is-current="@isCurrentPage" aria-current="@ariaCurrentPage" aria-label="@ariaLabel">
        @pageNumber
      </govuk-pagination-item>

      if (Model.Next.HasValue && Model.Next == pageNumber && Model.Next + 1 < Model.TotalPages)
      {
        <govuk-pagination-ellipsis/>
      }
    }
    @if (Model.HasNext)
    {
      <govuk-pagination-next href="@Html.Raw(Model.NextPageLink)" id="@Model.NextButtonId" data-testid="@Model.NextButtonId"/>
    }
  </govuk-pagination>
  // When pagination is used on the screen without a full page refresh
  @* if (!string.IsNullOrEmpty(Model.ContentContainerId)) *@
  @* { *@
  @*     <script type="application/javascript" nonce="@nonce"> *@
  @* *@
  @*         $(function () { *@
  @*             onPageMoved(); *@
  @* *@
  @*             function onPageMoved() { *@
  @*                 $("#@nextButtonId").on("click", function (e) { *@
  @*                     e.preventDefault(); *@
  @* *@
  @*                     const pageNumber = $('#@nextPageValueId').val(); *@
  @* *@
  @*                     refreshContent(pageNumber); *@
  @*                 }); *@
  @* *@
  @*                 $("#@previousButtonId").on("click", function (e) { *@
  @*                     e.preventDefault(); *@
  @* *@
  @*                     const pageNumber = $('#@previousPageValueId').val(); *@
  @* *@
  @*                     refreshContent(pageNumber); *@
  @*                 }); *@
  @* *@
  @*                 var numberedPageLinks = $('#@paginationContainerId').find('[data-page-number-link]'); *@
  @* *@
  @*                 numberedPageLinks.each(function () { *@
  @*                     const pageNumber = $(this).data('page-number-link'); *@
  @* *@
  @*                     $(this).click(function (e) { *@
  @* *@
  @*                         e.preventDefault(); *@
  @* *@
  @*                         refreshContent(pageNumber); *@
  @*                     }); *@
  @*                 }); *@
  @*             } *@
  @* *@
  @*             function refreshContent(pageNumber) { *@
  @* *@
  @*                 const url = `@Html.Raw(Model.Url)?pageNumber=${pageNumber}`; *@
  @* *@
  @*                 $.get(url) *@
  @*                     .done(function (response) { *@
  @*                         $("#@Model.ContentContainerId").html(response); *@
  @*                         onPageMoved(); *@
  @*                     }); *@
  @*             } *@
  @*         }); *@
  @*     </script> *@
  @* } *@
}
name: Run Cypress tests

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      CYPRESS_URL_ENDPOINT:
        required: true
      CYPRESS_API_ENDPOINT:
        required: true
      CYPRESS_USERNAME:
        required: true
      CYPRESS_AUTH_KEY:
        required: true
      CYPRESS_TENANT_ID:
        required: true
      CYPRESS_CLIENT_ID:
        required: true
      CYPRESS_CLIENT_SECRET:
        required: true
      CYPRESS_COMPLETEAPI_CLIENTID:
        required: true
      TEAMS_WEBHOOK_URL:
        required: true

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        type: environment

concurrency:
  group: ${{ github.workflow }}

jobs:
  cypress-tests:
    name: Run Cypress Tests
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - group: conversion-tasks
            browser: "edge"
            spec: |
              cypress/e2e/conversion-tasks/**/*.cy.ts
          - group: conversions
            browser: "edge"
            spec: |
              cypress/e2e/conversions/**/*.cy.ts
          - group: project-listings
            browser: "edge"
            spec: |
              cypress/e2e/project-listings/**/*.cy.ts
          - group: transfer-tasks
            browser: "edge"
            spec: |
              cypress/e2e/transfer-tasks/**/*.cy.ts
          - group: transfers
            browser: "edge"
            spec: |
              cypress/e2e/transfers/**/*.cy.ts
          - group: user-capabilities-regional-workers
            browser: "edge"
            spec: |
              cypress/e2e/user-capabilities-regional-workers/**/*.cy.ts
          - group: user-capabilities-support
            browser: "edge"
            spec: |
              cypress/e2e/user-capabilities-support/**/*.cy.ts
    container:
      image: cypress/browsers:22.15.1@sha256:753c6dd8dc176c2eb9e9a622146d2c260e308e86eb62ce2b3e6f12e7d67d7b13
    defaults:
      run:
        working-directory: src/Tests/Dfe.Complete.CypressTests
    outputs:
      results_conversion-tasks: ${{ steps.save-results.outputs.results_conversion-tasks }}
      results_conversions: ${{ steps.save-results.outputs.results_conversions }}
      results_project-listings: ${{ steps.save-results.outputs.results_project-listings }}
      results_transfer-tasks: ${{ steps.save-results.outputs.results_transfer-tasks }}
      results_transfers: ${{ steps.save-results.outputs.results_transfers }}
      results_user-capabilities-regional-workers: ${{ steps.save-results.outputs.results_user-capabilities-regional-workers }}
      results_user-capabilities-support: ${{ steps.save-results.outputs.results_user-capabilities-support }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          ref: ${{ github.ref }}

      - name: Run
        uses: cypress-io/github-action@v6
        env:
          CYPRESS_url: ${{ secrets.CYPRESS_URL_ENDPOINT }}
          CYPRESS_api: ${{ secrets.CYPRESS_API_ENDPOINT }}
          CYPRESS_username: ${{ secrets.CYPRESS_USERNAME }}
          CYPRESS_authKey: ${{ secrets.CYPRESS_AUTH_KEY }}
          CYPRESS_tenantId: ${{ secrets.CYPRESS_TENANT_ID }}
          CYPRESS_clientId: ${{ secrets.CYPRESS_CLIENT_ID }}
          CYPRESS_clientSecret: ${{ secrets.CYPRESS_CLIENT_SECRET }}
          CYPRESS_completeApiClientId: ${{ secrets.CYPRESS_COMPLETEAPI_CLIENTID }}
        with:
          browser: ${{ matrix.browser }}
          spec: ${{ matrix.spec }}
          working-directory: ./src/Tests/Dfe.Complete.CypressTests

      - name: Upload screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: screenshots-${{ inputs.environment }}-${{ matrix.group }}
          path: src/Tests/Dfe.Complete.CypressTests/cypress/screenshots

      - name: Generate report
        if: always()
        run: |
          mkdir mochareports
          npm run generate:html:report

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: reports-${{ inputs.environment }}-${{ matrix.group }}
          path: src/Tests/Dfe.Complete.CypressTests/mochareports

      - name: Save test results
        id: save-results
        if: always()
        run: |
          node <<EOF
          const fs = require('fs');
          const path = require('path');
          
          let totalTests = 0;
          let passedTests = 0;
          let failedTests = 0;
          let success = true;
          
          try {
            const reportPath = path.join(process.cwd(), 'mochareports', 'mochawesome.json');
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              totalTests = report.stats?.tests || 0;
              passedTests = report.stats?.passes || 0;
              failedTests = report.stats?.failures || 0;
              success = failedTests === 0;
            }
          } catch (error) {
            console.error('Error reading test results:', error);
          }
          
          const results = JSON.stringify({
            group: process.env.TEST_GROUP,
            totalTests,
            passedTests,
            failedTests,
            success
          });
          
          const outputName = 'results_' + process.env.TEST_GROUP.replace(/\s+/g, '-');
          console.log(\`::set-output name=\${outputName}::\${results}\`);
          EOF
        env:
          TEST_GROUP: ${{ matrix.group }}

  report-summary:
    name: Report Summary to Teams
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: cypress-tests
    if: always()
    steps:
      - name: Report consolidated results to Teams
        run: |
          npm install axios
          
          node <<EOF
          const axios = require('axios');
          
          try {
            // Get all outputs from the job context
            const allJobOutputs = ${{ toJSON(needs.cypress-tests.outputs) }};
            console.log("All job outputs:", JSON.stringify(allJobOutputs));
            
            // Parse the results from each test group
            const resultsArray = [];
            
            // Extract results for each known group
            const groups = [
              'conversion-tasks',
              'conversions',
              'project-listings',
              'transfer-tasks',
              'transfers',
              'user-capabilities-regional-workers',
              'user-capabilities-support'
            ];
            
            // Process each group's results
            for (const group of groups) {
              const outputKey = 'results_' + group;
              if (allJobOutputs[outputKey]) {
                try {
                  const result = JSON.parse(allJobOutputs[outputKey]);
                  resultsArray.push(result);
                  console.log(\`Parsed results for \${group}:\`, JSON.stringify(result));
                } catch (e) {
                  console.error(\`Error parsing results for \${group}:\`, e);
                }
              } else {
                console.log(\`No results found for group \${group}\`);
              }
            }
            
            let totalGroups = 0;
            let successfulGroups = 0;
            let totalTests = 0;
            let totalPassed = 0;
            let totalFailed = 0;
            let groupRows = [];
            
            for (const result of resultsArray) {
              if (result) {
                totalGroups++;
                if (result.success) successfulGroups++;
                totalTests += result.totalTests || 0;
                totalPassed += result.passedTests || 0;
                totalFailed += result.failedTests || 0;
                
                groupRows.push({
                  type: "TableRow",
                  cells: [
                    { type: "TableCell", items: [{ type: "TextBlock", text: result.group || "Unknown", weight: "default" }] },
                    { type: "TableCell", items: [{ type: "TextBlock", text: String(result.totalTests || "0"), weight: "default" }] },
                    { type: "TableCell", items: [{ type: "TextBlock", text: String(result.passedTests || "0"), weight: "default" }] },
                    { type: "TableCell", items: [{ type: "TextBlock", text: String(result.failedTests || "0"), weight: "default" }] },
                    { 
                      type: "TableCell", 
                      items: [{ 
                        type: "TextBlock", 
                        text: result.success ? "✅" : "❌", 
                        weight: "default" 
                      }] 
                    }
                  ]
                });
              }
            }
            
            const overallSuccess = totalFailed === 0;
            const failedGroups = totalGroups - successfulGroups;
            
            const webhookUrl = process.env.TEAMS_WEBHOOK_URL;
            const message = {
              type: "message",
              attachments: [
                {
                  contentType: "application/vnd.microsoft.card.adaptive",
                  contentUrl: null,
                  content: {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    type: "AdaptiveCard",
                    version: "1.2",
                    body: [
                      {
                        type: "Container",
                        style: overallSuccess ? "good" : "attention",
                        items: [
                          {
                            type: "TextBlock",
                            wrap: true,
                            text: overallSuccess ? "**Cypress Tests Passed** ✅" : "**Cypress Tests Failed** ❌",
                            size: "large",
                            horizontalAlignment: "center"
                          },
                          {
                            type: "TextBlock",
                            wrap: true,
                            text: "**Branch:** " + process.env.GITHUB_REF
                          },
                          {
                            type: "TextBlock",
                            wrap: true,
                            text: "**Workflow:** " + process.env.GITHUB_WORKFLOW
                          },
                          {
                            type: "TextBlock",
                            wrap: true,
                            text: "**Environment:** " + process.env.ENVIRONMENT
                          },
                          {
                            type: "TextBlock",
                            wrap: true,
                            text: "**Overall Results:** " + totalGroups + " test groups, " + successfulGroups + " passed, " + failedGroups + " failed"
                          },
                          {
                            type: "TextBlock",
                            wrap: true,
                            text: "**Total Tests:** " + totalTests + " (" + totalPassed + " passed, " + totalFailed + " failed)"
                          },
                          {
                            type: "Table",
                            columns: [
                              { width: 1 },
                              { width: 1 },
                              { width: 1 },
                              { width: 1 },
                              { width: 1 }
                            ],
                            rows: [
                              {
                                type: "TableRow",
                                cells: [
                                  { type: "TableCell", items: [{ type: "TextBlock", text: "Test Group", weight: "bolder" }] },
                                  { type: "TableCell", items: [{ type: "TextBlock", text: "Total", weight: "bolder" }] },
                                  { type: "TableCell", items: [{ type: "TextBlock", text: "Passed", weight: "bolder" }] },
                                  { type: "TableCell", items: [{ type: "TextBlock", text: "Failed", weight: "bolder" }] },
                                  { type: "TableCell", items: [{ type: "TextBlock", text: "Status", weight: "bolder" }] }
                                ]
                              },
                              ...groupRows
                            ]
                          },
                          {
                            type: "TextBlock",
                            wrap: true,
                            text: "**See more information:** [" + process.env.INFORMATION_LINK + "](" + process.env.INFORMATION_LINK + ")"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            };
            
            axios.post(webhookUrl, message)
              .then(() => console.log("Summary message sent to Teams"))
              .catch(err => { console.error("Error sending summary to Teams", err); process.exit(1); });
          } catch (error) {
            console.error("Error in report summary:", error);
          }
          EOF
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          ENVIRONMENT: ${{ inputs.environment }}
          INFORMATION_LINK: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
